---
import { fileStructure } from '../data/projects.js';
---
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Silkscreen:wght@400;700&display=swap" rel="stylesheet">
<style>
    .mac-window {
        width: 100%;
        height: 70vh;
        margin: 2rem auto;
        border-radius: 10px;
        background-color: #f5f5f7;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        border: 1px solid #ddd;
    }

    .mac-header {
        display: flex;
        align-items: center;
        padding: 0.5rem;
        background-color: #e0e0e0;
        border-bottom: 1px solid #ccc;
    }

    .nav-buttons {
        display: flex;
        gap: 0.5rem;
        margin-left: 1rem;
    }

    .nav-button {
        padding: 0.25rem 0.5rem;
        cursor: pointer;
    }

    .nav-button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .current-path {
        margin-left: 1rem;
        font-family: 'Silkscreen', cursive;
        font-size: 0.9rem;
    }

    .mac-buttons {
        display: flex;
        gap: 0.5rem;
        margin-left: 0.5rem;
    }

    .mac-button {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background-color: #ff5f57; /* Close button */
    }

    .mac-button:nth-child(2) {
        background-color: #ffbd2e; /* Minimize button */
    }

    .mac-button:nth-child(3) {
        background-color: #28c840; /* Maximize button */
    }

    .mac-content {
        padding: 2rem;
        color: #333;
        height: calc(70vh - 3rem);
        overflow-y: auto;
    }

    .file-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 1rem;
        padding: 1rem;
    }



</style>
<div class="flex space-x-4 justify-center items-start">
    <div class="mac-window">
        <div class="mac-header">
            <div class="mac-buttons">
                <div class="mac-button"></div>
                <div class="mac-button"></div>
                <div class="mac-button"></div>
            </div>
            <div class="nav-buttons">
                <button id="backButton" class="nav-button" disabled>←</button>
                <button id="forwardButton" class="nav-button" disabled>→</button>
            </div>
            <div class="current-path silkscreen-regular"></div>
        </div>
        <div class="flex">
            <div id="file-structure" class="mac-content file-grid w-full lg:w-2/3 flex flex-wrap flex-col bg-gray-100">
                <!-- File structure will be rendered here -->
            </div>
            <div id="content-display" class="hidden lg:flex lg:flex-col lg:w-1/3 p-8 h-100p bg-white">
                <!-- Content of the selected file will be displayed here -->
                <p class="side-bar-text ">Click on a file to view its content.</p>
            </div>
        </div>
    </div>
</div>


<script define:vars={{ fileStructure }}>
    const folderIcon = '/assets/folder.png';
    const fileIcon = '/assets/document.png';
    
    let navigationStack = [];
    let currentIndex = -1;
    let currentFolder = fileStructure;

    function updateNavButtons() {
        const backButton = document.querySelector('#backButton');
        const forwardButton = document.querySelector('#forwardButton');
        const pathDisplay = document.querySelector('.current-path');
        
        backButton.disabled = currentIndex <= 0;
        forwardButton.disabled = currentIndex >= navigationStack.length - 1;
        
        // Update current path display
        const currentPath = navigationStack[currentIndex]?.path || '/';
        pathDisplay.textContent = currentPath;
    }

    function navigateToFolder(folder, path) {
        currentIndex++;
        navigationStack = navigationStack.slice(0, currentIndex);
        navigationStack.push({ folder, path });
        currentFolder = folder;
        renderCurrentFolder();
        updateNavButtons();
    }

    function renderCurrentFolder() {
        const container = document.getElementById('file-structure');
        container.innerHTML = '';
        
        currentFolder.forEach((item) => {
            const div = document.createElement('div');
            div.className = 'item flex flex-col text-center p-2 cursor-pointer align-items-center';
            
            const img = document.createElement('img');
            img.src = item.type === 'folder' ? folderIcon : item.img;
            img.alt = item.type;
            img.className = item.type === 'folder' ? 'lg:w-32 w-100' : 'lg:w-24';

            const span = document.createElement('span');
            span.textContent = item.name;
            span.className = 'side-bar-text';

            div.appendChild(img);
            div.appendChild(span);

            div.addEventListener('click', (e) => {
                span.classList.toggle('selected-text');
                img.classList.toggle('selected');
                // add selected folder on display to the right
                const contentDisplay = document.getElementById('content-display');
                if (contentDisplay) {
                    contentDisplay.innerHTML = ''; // Clear previous content

                    const textElement = document.createElement('p');
                    const itemName = document.createElement('p');
                    const itemDescription = document.createElement('p');

                    textElement.className = 'side-bar-text';
                    textElement.textContent = `Type: ${item.type}`;
                    itemName.className = 'side-bar-text';
                    itemName.textContent = `Name: ${item.name}`;
                    itemDescription.className = 'side-bar-text';
                    itemDescription.textContent = `Description: ${item.description}` || 'No description available';
                    

                    const imageElement = document.createElement('img');
                    imageElement.className = 'w-auto h-auto mb-4 pl-16 pr-16';
                    imageElement.src = item.img;
                    
                    contentDisplay.appendChild(imageElement);
                    contentDisplay.appendChild(textElement);
                    contentDisplay.appendChild(itemName);
                    if (item.date) {
                        const itemDate = document.createElement('p');
                        itemDate.textContent = `Date: ${item.date}`;
                        itemDate.className = 'side-bar-text'
                        contentDisplay.appendChild(itemDate);
                    }
                    contentDisplay.appendChild(itemDescription);
                    
                }
            });

            // Detect if the device is a small screen (mobile/tablet)
            function isSmallScreen() {
                return window.innerWidth < 1024;
            }

            if (isSmallScreen()) {
                // On small screens, use single click to open
                div.addEventListener('click', () => {
                    if (item.type === 'folder' && item.children) {
                        const newPath = (navigationStack[currentIndex]?.path || '') + '/' + item.name;
                        navigateToFolder(item.children, newPath);
                    } else if (item.type === 'link') {
                        window.location.href = item.url;
                    }
                    // Update content display
                    const contentDisplay = document.getElementById('content-display');
                    if (contentDisplay) {
                        updateContentDisplay(item);
                    }
                });
            } else {

                div.addEventListener('dblclick', () => {
                    if (item.type === 'folder' && item.children) {
                        const newPath = (navigationStack[currentIndex]?.path || '') + '/' + item.name;
                        navigateToFolder(item.children, newPath);
                    } else if (item.type === 'link') {
                        window.location.href = item.url;
                    }
                    // Update content display
                    const contentDisplay = document.getElementById('content-display');
                    if (contentDisplay) {
                        updateContentDisplay(item);
                    }
                });
            }


            container.appendChild(div);
        });
    }

    // // function to load new page content when a file is clicked
    // function loadFileContent(item) {
    //     const contentDisplay = document.getElementById('content-display');
    //     contentDisplay.innerHTML = '';

    //     if (item.type === 'link') {
    //         const linkElement = document.createElement('a');
    //         linkElement.href = item.url;
    //         linkElement.target = '_blank';
    //         linkElement.textContent = `Open ${item.name}`;
    //         contentDisplay.appendChild(linkElement);
    //     } else {
    //         updateContentDisplay(item);
    //     }
    // }

    function updateContentDisplay(item) {
        const contentDisplay = document.getElementById('content-display');
        contentDisplay.innerHTML = '';

        const imageElement = document.createElement('img');
        imageElement.className = 'w-auto h-auto mb-4 pl-16 pr-16';
        imageElement.src = item.img;
        
        const textElement = document.createElement('p');
        const itemName = document.createElement('p');
        const itemDescription = document.createElement('p');

        textElement.className = 'side-bar-text';
        textElement.textContent = `Type: ${item.type}`;
        itemName.className = 'side-bar-text';
        itemName.textContent = `Name: ${item.name}`;
        itemDescription.className = 'side-bar-text';
        itemDescription.textContent = `Description: ${item.description}` || 'No description available';

        contentDisplay.appendChild(imageElement);
        contentDisplay.appendChild(textElement);
        contentDisplay.appendChild(itemName);
        contentDisplay.appendChild(itemDescription);
    }

    // Initialize the view
    document.addEventListener('DOMContentLoaded', () => {
        navigateToFolder(fileStructure, '');
        
        // Add navigation button handlers
        document.querySelector('#backButton').addEventListener('click', () => {
            if (currentIndex > 0) {
                currentIndex--;
                currentFolder = navigationStack[currentIndex].folder;
                renderCurrentFolder();
                updateNavButtons();
            }
        });

        document.querySelector('#forwardButton').addEventListener('click', () => {
            if (currentIndex < navigationStack.length - 1) {
                currentIndex++;
                currentFolder = navigationStack[currentIndex].folder;
                renderCurrentFolder();
                updateNavButtons();
            }
        });
    });
</script>
